```
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CheckersGame
{
    public partial class Form1 : Form
    {
        //Обьявление константы размера игрового поля
        const int mapSize = 8;
        //Обьявление константы размера клетки
        const int cellSize = 50;

        //переменная для определения хода
        int currentPlayer;

        List<Button> simpleSteps = new List<Button>();

        int countEatSteps = 0;

        //Кнопка для записи предыдущей нажатой кнопки
        Button prevButton;

        Button pressedButton;
        bool isContinue = false;

        //переменная с помощью которой отслеживаем находится ли шашка в процессе ходьбы
        bool isMoving;

        //Создание игрового поля в виде двухмерного массива 
        int[,] map = new int[mapSize, mapSize];

        Button[,] buttons = new Button[mapSize, mapSize];

        //создаем переменные для черной и белой шашки
        Image whiteFigure;
        Image blackFigure;
        public Form1()
        {
            InitializeComponent();

            //привязываем картинки черной и белой фигуры
            whiteFigure = new Bitmap(new Bitmap(@"C:\Users\Полений\source\repos\CheckersGame\CheckersGame\Sprites\w.png"), new Size(cellSize - 10, cellSize - 10));
            blackFigure = new Bitmap(new Bitmap(@"C:\Users\Полений\source\repos\CheckersGame\CheckersGame\Sprites\b.png"), new Size(cellSize-10,cellSize-10));

            this.Text = "Шахматы";
            //инициализация игры
            Init();
        }
        //Функция для инициализации игры
        public void Init()
        {
            currentPlayer = 1;
            isMoving = false;
            prevButton = null;



            map = new int[mapSize, mapSize]{
                { 0,1,0,1,0,1,0,1 },
                { 1,0,1,0,1,0,1,0 },
                { 0,1,0,1,0,1,0,1 },
                { 0,0,0,0,0,0,0,0 },
                { 0,0,0,0,0,0,0,0 },
                { 2,0,2,0,2,0,2,0 },
                { 0,2,0,2,0,2,0,2 },
                { 2,0,2,0,2,0,2,0 }
            };




            //вызываеи функция для создания карты
            CreateMap();
        }

        //Функция для перезапуска игры при условии, что у одного игрока закончились шашки
        public void ResetGame()
        {
            bool player1 = false;
            bool player2 = false;

            for (int i = 0; i < mapSize; i++)
            {
                for (int j = 0; j < mapSize; j++)
                {
                    if (map[i, j] == 1)
                        player1 = true;
                    if (map[i, j] == 2)
                        player2 = true;
                }
            }
            if (!player1 || !player2)
            {
                this.Controls.Clear();
                Init();
            }
        }


        //Функция для создания карты
        public void CreateMap()
        {
            //Расчет высоты и ширины игрового поля
            this.Width = (mapSize+2) * cellSize;
            this.Height = (mapSize + 1) * cellSize;


            //Циклы для создания поля
            for (int i=0; i<mapSize; i++)
            {
                for (int j = 0; j< mapSize; j++)
                {
                    //Создаем кнопку
                    Button button = new Button();

                    //Смещаемся на следующую клетку
                    button.Location = new Point(j * cellSize, i * cellSize);
                    //Задаем размер для кнопки
                    button.Size = new Size(cellSize, cellSize);
                    //Создаем обработчик событий для клика мышки
                    button.Click += new EventHandler(OnFigurePress);

                    //проверяем, если в массиве стоит 1 - то ставим белую шашку, а если 2 - то черную
                    if (map[i, j] == 1)
                        button.Image = whiteFigure;
                    else if (map[i, j] == 2)
                        button.Image = blackFigure;

                    //Закраштваем четные клетки в серый цвет
                    button.BackColor = GetPrevButtonColor(button);
                    //Помещаем созданную кнопку на форму
                    this.Controls.Add(button);

                }
            }
        }
        //функция смены игроков
        public void SwitchPlayer()
        {
            currentPlayer = currentPlayer == 1 ? 2 : 1;
            ResetGame();

        }
        //возвращаем предыдущий цвет кнопки
        public Color GetPrevButtonColor(Button prevButton)
        {
            if ((prevButton.Location.Y / cellSize % 2) != 0)
            {
                if ((prevButton.Location.X / cellSize % 2) == 0)
                {
                    return Color.Gray;
                }
            }
            if ((prevButton.Location.Y / cellSize) % 2 == 0)
            {
                if ((prevButton.Location.X / cellSize) % 2 != 0)
                {
                    return Color.Gray;
                }
            }
            return Color.White;
        }

        //Оброботчик событий для кнопок
        public void OnFigurePress(object sender, EventArgs e)
        {
            if (prevButton != null)
                prevButton.BackColor = GetPrevButtonColor(prevButton);
            //Обьявляем локальную переменную pressedButton
            Button pressedButton = sender as Button;

            //Проверяем условие: если мы на наш ход выбрали ящейку с шашакой, то окрашиваем ячейку в красный цвет
            if (map[pressedButton.Location.Y/cellSize, pressedButton.Location.X/cellSize] != 0 && map[pressedButton.Location.Y / cellSize, pressedButton.Location.X / cellSize]== currentPlayer)
            {
                CloseSteps();
                pressedButton.BackColor = Color.Red;
                DeactivateAllButtons();
                pressedButton.Enabled = true;
                countEatSteps = 0;
                if (pressedButton.Text == "D")
                    ShowSteps(pressedButton.Location.Y / cellSize, pressedButton.Location.X / cellSize, false);
                else ShowSteps(pressedButton.Location.Y / cellSize, pressedButton.Location.X / cellSize);

                if (isMoving)
                {
                    CloseSteps();
                    pressedButton.BackColor = GetPrevButtonColor(pressedButton);
                    ShowPossibleSteps();
                    isMoving = false;
                }
                else
                    isMoving = true;
            }
            //если была выбрана шашка, то мы должны поменять её с той клеткой, куда ходим
            else
            {
                if (isMoving)
                {
                    isContinue = false;
                    if (Math.Abs(pressedButton.Location.X / cellSize - prevButton.Location.X / cellSize) > 1)
                    {
                        isContinue = true;
                        DeleteEaten(pressedButton, prevButton);
                    }
                    int temp = map[pressedButton.Location.Y / cellSize, pressedButton.Location.X / cellSize];
                    map[pressedButton.Location.Y / cellSize, pressedButton.Location.X / cellSize] = map[prevButton.Location.Y / cellSize, prevButton.Location.X / cellSize];
                    map[prevButton.Location.Y / cellSize, prevButton.Location.X / cellSize] = temp;
                    pressedButton.Image = prevButton.Image;
                    prevButton.Image = null;
                    pressedButton.Text = prevButton.Text;
                    prevButton.Text = "";
                    SwitchButtonToCheat(pressedButton);
                    countEatSteps = 0;
                    isMoving = false;
                    CloseSteps();
                    DeactivateAllButtons();
                    if (pressedButton.Text == "D")
                        ShowSteps(pressedButton.Location.Y / cellSize, pressedButton.Location.X / cellSize, false);
                    else ShowSteps(pressedButton.Location.Y / cellSize, pressedButton.Location.X / cellSize);
                    if (countEatSteps == 0 || !isContinue)
                    {
                        CloseSteps();
                        SwitchPlayer();
                        ShowPossibleSteps();
                        isContinue = false;
                    }
                    else if (isContinue)
                    {
                        pressedButton.BackColor = Color.Red;
                        pressedButton.Enabled = true;
                        isMoving = true;
                    }
                }
            }

            prevButton = pressedButton;
        }

```
